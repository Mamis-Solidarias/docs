networks:
 web:
  name: web
  external: true
 mamis-net:
  name: mamis-net
  driver: bridge
volumes:
 db:
  external: false
  name: db
services:
 rabbitmq:
  image: masstransit/rabbitmq
  container_name: rabbitMQ
  restart: unless-stopped
  networks:
   - mamis-net
 jaeger:
  image: jaegertracing/all-in-one:latest
  container_name: jaeger
  restart: unless-stopped
  networks:
   - web
   - mamis-net
  labels:
   traefik.enable: "true"
   traefik.http.routers.jaeger.rule: "Host(`jaeger.com`)"
   traefik.http.services.jaeger.loadbalancer.server.port: "16686"
 mamis-db:
  image: postgres:13-alpine
  container_name: mamis-db
  restart: unless-stopped
  environment:
   POSTGRES_USER: dev
   POSTGRES_PASSWORD: dev
   PGTZ: America/Argentina/Buenos_Aires
  volumes:
   - db:/var/lib/postgresql/data
  networks:
   - mamis-net
 redis:
  image: redis:6-alpine
  container_name: mamis-redis
  restart: unless-stopped
  networks:
   - mamis-net
 users:
  image: ghcr.io/mamis-solidarias/users:main
  # image: ghcr.io/mamis-solidarias/users:1.3
  container_name: users
  restart: unless-stopped
  depends_on:
   - rabbitmq
   - jaeger
   - mamis-db
   - redis
  environment:
   ASPNETCORE_ENVIRONMENT: Docker
   OpenTelemetry__NewRelic__ApiKey: ${NewRelicApiKey}
  volumes:
   - ./keychain/beneficiaries:/app/keys
  networks:
   - mamis-net
 beneficiaries:
  image: ghcr.io/mamis-solidarias/beneficiaries:main
  # image: ghcr.io/mamis-solidarias/beneficiaries:1.4
  container_name: beneficiaries
  restart: unless-stopped
  depends_on:
   - rabbitmq
   - jaeger
   - mamis-db
   - redis
  environment:
   ASPNETCORE_ENVIRONMENT: Docker
   OpenTelemetry__NewRelic__ApiKey: ${NewRelicApiKey}
  volumes:
   - ./keychain/beneficiaries:/app/keys
  networks:
   - mamis-net
 donors:
  image: ghcr.io/mamis-solidarias/donors:main
  # image: ghcr.io/mamis-solidarias/donors:1.3
  container_name: donors
  restart: unless-stopped
  depends_on:
   - rabbitmq
   - jaeger
   - mamis-db
   - redis
  environment:
   ASPNETCORE_ENVIRONMENT: Docker
   OpenTelemetry__NewRelic__ApiKey: ${NewRelicApiKey}
  volumes:
   - ./keychain/donors:/app/keys
  networks:
   - mamis-net
 donations:
  image: ghcr.io/mamis-solidarias/donations:main
  # image: ghcr.io/mamis-solidarias/donations:1.1
  container_name: donations
  restart: unless-stopped
  depends_on:
   - rabbitmq
   - jaeger
   - mamis-db
   - redis
  environment:
   ASPNETCORE_ENVIRONMENT: Docker
   OpenTelemetry__NewRelic__ApiKey: ${NewRelicApiKey}
  volumes:
   - ./keychain/donations:/app/keys
  networks:
   - mamis-net
 campaigns:
  image: ghcr.io/mamis-solidarias/campaigns:main
  # image: ghcr.io/mamis-solidarias/campaigns:2.1
  container_name: campaigns
  restart: unless-stopped
  depends_on:
   - rabbitmq
   - jaeger
   - mamis-db
   - redis
  environment:
   ASPNETCORE_ENVIRONMENT: Docker
   OpenTelemetry__NewRelic__ApiKey: ${NewRelicApiKey}
  volumes:
   - ./keychain/campaigns:/app/keys
  networks:
   - mamis-net
 gateway:
  image: ghcr.io/mamis-solidarias/gateway:main
  # image: ghcr.io/mamis-solidarias/gateway:1.5
  container_name: gateway
  restart: unless-stopped
  depends_on:
   - users
   - beneficiaries
   - donors
   - donations
   - campaigns
   - rabbitmq
   - jaeger
   - mamis-db
   - redis
  environment:
   ASPNETCORE_ENVIRONMENT: Docker
   OpenTelemetry__NewRelic__ApiKey: ${NewRelicApiKey}
   ReverseProxy__Clusters__frontend__Destinations__frontend-1__Address: http://frontend:3000
  volumes:
   - ./keychain/gateway:/app/keys
  networks:
   - web
   - mamis-net
  labels:
   traefik.enable: "true"
   traefik.http.routers.gateway.rule: "Host(`mamis.com`)"
   traefik.http.services.gateway.loadbalancer.server.port: "80"
 frontend:
  image: ghcr.io/mamis-solidarias/frontend:main
  container_name: frontend
  restart: unless-stopped
  depends_on:
   - gateway
  networks:
   - mamis-net
